import tkinter as tk
from tkinter import ttk
import pandas as pd
from tkinter import filedialog
from tkinter import PhotoImage

class CourseInfoApp:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1400x900")
        self.df = None  
        self.root.title("Available Classes at MCC")
        icon = PhotoImage(file='CIS210GroupA\mccLogo.png')
        self.root.iconphoto(False, icon)

        
        self.browse_button = tk.Button(root, text="Browse", command=self.open_file_dialog)
        self.browse_button.place(x=600, y=250, height=30, width=80)

        # Creating an Intro label next to the button that explains what the program does
        intro_label = tk.Label(root, text="This Program is here to help students find "+ 
                              "\n what courses at Manchester Community College, NH, are "+
                              "\n available to register for. By using the dropdown menu to "+
                              "\n the right, in case you are not sure what the abbreviation "+
                              "\n means, when you select an option, a brief explanation "+
                              "\n below the menu appears to explain the abbreviation. "+
                              "\n After you have found what courses you want to look up, "+
                              "\n just select the option and then click the button. Once "+
                              "\n you do that a whole description of all the available "+
                              "\n classes, what days you have to go in, what time it "+
                              "\n runs at, building, etc. ")
        intro_label.place(x=0, y=210)

        # Create the text box
        self.output_text = tk.Text(root, height=20, width=1200)
        self.output_text.place(x=0, y=0, height=200, width=1300)

        # Create the dropdown menu
        self.dropdown_var = tk.StringVar()
        self.label_selected = tk.Label(root, wraplength=150 ,text="Selected: ")
        self.label_selected.place(x=400, y=280, height=45, width=160)
        self.dropdown_var.trace("w", self.on_dropdown_select)

        self.dropdown = ttk.Combobox(root, values=['FIN', 'AUTO', 'PSPT', 'MATH', 'ENGL',
                                        'ADMT', 'HUMA', 'SOCI', 'WELD', 'ARTS',
                                        'NCMI', 'ROBO', 'CIS', 'ASL', 'HFIT',
                                        'HSV', 'PSYC', 'ACCT', 'PHYS', 'FYE',
                                        'HIST', 'CHEM', 'BIOL', 'NURS', 'HVAC',
                                        'NCIE', 'ECE', 'AHLT', 'ANTH', 'BUS',
                                        'PHIL', 'POLS', 'ECON', 'MKTG', 'GDES',
                                        'NCHV', 'NCCP'], textvariable=self.dropdown_var)
        self.dropdown.place(x=400, y=210, height=30, width=160)

        # Create a scrollbar widget
        self.scrollbar = tk.Scrollbar(root, command=self.output_text.yview, troughcolor='gray', width=10)
        self.scrollbar.place(x=1300, y=0, height=200)
        self.scrollbar.config(command=self.output_text.yview)
        self.output_text.config(yscrollcommand=self.scrollbar.set)

        # Create the "Show Available Courses" button
        self.button = tk.Button(root, text="Show Available Courses", command=self.retrieve_data)
        self.button.place(x=400, y=250, height=30, width=160)

        #exit button to exit the program
        self.quit_button = tk.Button(root, text="Exit", width=10, command=self.exit_program, bg="red", fg="white", borderwidth=3, relief=tk.RIDGE)
        self.quit_button.place(x=900, y=300)

    def open_file_dialog(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if file_path:
            self.df = pd.read_csv(file_path)

    def on_dropdown_select(self, *args):
        explanations = {
        'FIN': "Personal Finance Courses",
        'AUTO': "Automotive Courses",
        'PSPT': "Power Systems Protection Training Courses",
        'MATH': "Math Courses",
        'ENGL': "English Courses",
        'ADMT': "Advanced Manufacturing Technology Courses",
        'HUMA': "Humanity Courses",
        'SOCI': "Sociology Courses",
        'WELD': "Welding Courses",
        'ARTS': "Arts Courses",
        'NCMI': "National  Certification for Medical Interpreters Courses",
        'ROBO': "Robotic Courses",
        'CIS': "Computer Science Courses",
        'ASL': "American Sign Language Courses",
        'HFIT': "Health Fitness Courses",
        'HSV': "Health and Human Services Courses",
        'PSYC': "Psychology Courses",
        'ACCT': "Accounting Courses",
        'PHYS': "Physics Courses",
        'FYE': "MCC Essential Courses",
        'HIST': "History Courses",
        'CHEM': "Chemistry Courses",
        'BIOL': "Biology Courses",
        'NURS': "Nursing Courses",
        'HVAC': "Heating, Ventilation & Air Conditioning Courses",
        'NCIE': "National Centre of Indigenous Excellence Courses",
        'ECE': "Early Childhood Education Courses",
        'AHLT': "Allied Health Courses",
        'ANTH': "Anthropology Courses",
        'BUS': "Business Courses",
        'PHIL': "Philosophy Courses",
        'POLS': "Political Science Courses",
        'ECON': "Economy Courses",
        'MKTG': "Marketing Courses",
        'GDES': "Graphical Design Courses",
        'NCHV': "National Coalition for Homeless Veterans Courses",
        'NCCP': "Cyber Security Courses"
}
        selected = self.dropdown_var.get()
        if selected in explanations:
           self.label_selected.config(text="Selected: " + explanations.get(selected, ""))

        else:
            self.label_selected.config(text="Selected: ")

    def retrieve_data(self):
        if self.df is None:
            return
        selected_element = self.dropdown.get()
        selected_row = self.df[self.df['SUBJ'] == selected_element]
        selected_columns = ['BLDG', 'RM', 'CRN', 'CRSE', 'SECT', 'TITLE', 'MON', 'TUE', 'WED', 'THU',
                            'FRI', 'BEGIN', 'END', 'BEGINDATE', 'ENDDATE', 'CRDT_HRS', 'MAX', 'ACTL', 'WL']
        display_data = selected_row[selected_columns].fillna(" ")
        self.output_text.delete('1.0', tk.END)
        self.output_text.insert(tk.END, display_data.to_string(index=False))

    def exit_program(self):
        self.root.destroy()

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = CourseInfoApp(root)
    app.run()